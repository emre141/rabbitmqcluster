---
- name: Get AWS Acces Key
  shell: aws configure get aws_access_key_id --profile rabbitmq
  register: access_key
  changed_when: false

- name: Set AWS Access Key
  set_fact:
    aws_access_key: "{{ access_key.stdout }}"


- name: Get AWS Secret Key
  shell: aws configure get aws_secret_access_key --profile rabbitmq
  changed_when: false
  register: secret_key

- name: Set AWS Secret Key
  set_fact:
    aws_secret_key: "{{ secret_key.stdout }}"

- name : Debug Team Cluster Name
  debug: msg="{{ ansible_env.teamcluster }}"


- name: Get Team Cluster from OS Variable
  set_fact:
    teamcluster: "{{ ansible_env.teamcluster }}"

- name: Set Team  ClusterName
  set_fact:
    team: "{% for account in account_domains %}{% if account == teamcluster %}{{account_domains[account]['team']}}{%endif%}{% endfor %}"

- name: Set Account  Domain
  set_fact:
    accountdomain: "{% for account in account_domains %}{% if account == teamcluster %}{{account_domains[account]['domain']}}{%endif%}{% endfor %}"

- name : Debug Team Cluster Name
  debug: msg="{{ team }}"

- name: Debug Account Domain
  debug: msg="{{ accountdomain }}"


- name: Get AWS Region
  shell: aws configure get region --profile rabbitmq
  register: region
  changed_when: false

- name: Set AWS Region
  set_fact:
    aws_region: "{{ region.stdout }}"

- name: Calling Cloudwatch Metric Monitoring Role
  include_role:
    name: cloudwatch
  vars:
    cloudwatch_aws_key: "{{ aws_access_key }}"
    cloudwatch_aws_secret_key: "{{ aws_secret_key }}"

- name: Create LVM VG(s)
  lvg:
    vg: "{{ vg_name }}"
    pvs: "{% for disk in vg_pvs %}/dev/{{ disk }}{% if not loop.last %},{% endif %}{% endfor %}"
    state: present
  when:
  - vg_name not in ansible_lvm.vgs
  - partition_exists.split(';')
  vars:
    partition_exists: "{% for disk in vg_pvs %}ansible_devices[{{ disk }}]['partitions']{{ disk }} is defined{% if not loop.last %};{% endif %}{% endfor %}"
  tags:
  - pvs

- name: Extend the logical volume to take all remaining space of the PVs and resize the underlying filesystem
  lvol:
    vg: "{{ vg_name }}"
    lv: "{{ lv_name }}"
    size: +100%FREE
    resizefs: true
  when:
  - lv_name  not in ansible_lvm.lvs
  tags:
  - lvs

- name: Create a xfs filesystem
  filesystem:
    fstype: xfs
    dev: '/dev/{{vg_name}}/{{lv_name}}'
  tags:
  - fs

- name: Create Rabbit etc & var dirs manually as we only install Rabbit later
  file:
    path: '{{ item }}'
    state: directory
    mode: 0755
  changed_when: false
  with_items:
  - /etc/rabbitmq
  - /var/lib/rabbitmq
  - /data/rabbitmq

- name: Mount up device by UUID
  mount:
    path: /data/rabbitmq
    src: '/dev/{{vg_name}}/{{lv_name}}'
    fstype: xfs
    opts: defaults
    state: mounted
  tags:
  - mount


- name: Install python-pip and other tools to install python packages/ansible
  yum:
    name: ['python-pip', 'yum-plugin-versionlock', 'awslogs', 'git']
    state: latest
    allow_downgrade: yes

- name: Install Boto & Ansible to run Ansible when instance comes up
  pip:
    name: ['pip', 'awscli','jinja2', 'boto', 'boto3', 'botocore', 'cryptography']
    state: latest

- name: Get SSM Cookie Parameters
  shell: '/usr/bin/python  /etc/ansible/roles/rabbitmq/ssm.py'
  register: cookie
  tags:
  - ssmcookie

- name: Get SSM RabbitMQ Username and Password
  shell: '/usr/bin/python  /etc/ansible/roles/rabbitmq/ssmusers.py'
  register: result
  tags:
  - ssmparameter

- name: Set Fact SSM RabbitMQ Cookie
  set_fact:
    rabbitmqcookie: "{{ cookie.stdout_lines }}"

- name: Add Rabbit ENV config file to make sure full hostnames are used
  template:
    src: rabbitmq-env.conf.j2
    dest: /etc/rabbitmq/rabbitmq-env.conf
  register: rabbitmqenv

- name: Ensure erlang cookies are the same among all instances
  template:
    src: erlang.cookie.j2
    dest: /var/lib/rabbitmq/.erlang.cookie
    mode: 0400
  changed_when: false


- name: Create ansible library dir in root folder
  file:
    path: /root/library
    state: directory

- name: Put ansible.cfg into root dir to configure ansible library/role dirs
  copy:
    src: ansible.cfg
    dest: /root/ansible.cfg


- name: Change NoFiles Limit Edited security/limits.conf
  pam_limits:
    domain: '*'
    limit_type: '-'
    limit_item: nofile
    value: 500000
    comment: increased file creation limit

- name: Increase File Handler Size change on sysctl.conf
  sysctl:
    sysctl_file: /etc/sysctl.d/rabbitmq.conf
    reload: yes
    state: present
    name: fs.file-max
    value: 500000

- name: Start And Enable AWSLOGs
  systemd:
    name: awslogsd
    state: started
    enabled: yes

- name: Change Default Region on awscli
  replace:
    path: /etc/awslogs/awscli.conf
    regexp: 'region = us-east-1'
    replace: 'region = <replaced_region>'
  notify:
  - restart awslogd

- name: Configure AWS Cloudwatch for RabbitMQ Application Log
  blockinfile:
    path:  /etc/awslogs/awslogs.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.marker }}"
    state: present
    block: |
      [{{ item.block }}]
      datetime_format = %Y-%m-%d %H:%M:%S
      file = {{ item.file}}
      buffer_duration = 5000
      log_stream_name = {{ item.log_stream_name}}-{{ ansible_hostname }}
      initial_position = start_of_file
      log_group_name = rabbitmq-{{ ansible_env.teamcluster }}
  with_items:
  - { marker: RABBITAPPLOG, block: /var/log/rabbitmq/rabbit.log, file: /var/log/rabbitmq/rabbit.log, log_stream_name: rabbitapp }
  - { marker: CLOUDINITLOG, block: /var/log/cloud-init-output.log, file: /var/log/cloud-init-output.log, log_stream_name: rabbitmqcloudinit }
  notify:
  - restart awslogd
  tags:
  - logs
